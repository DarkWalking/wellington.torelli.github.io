{"version":3,"file":"src_app_pages_lock_lock_module_ts.2afe00b80236bdf7.js","mappings":"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","names":["constructor","email","password","this","AppLoaderComponent","ngOnInit","selectors","i0","AppLoaderService","dialog","open","id","title","Promise","resolve","then","loader","getDialogById","dialogRef","disableClose","panelClass","updateSize","componentInstance","close","factory","routes","path","pathMatch","component","document","renderer","fb","router","notify","authService","JwtHelperService","frmLock","group","pass","Validators","currentUser","localStorage","getItem","token","JSON","parse","dadosToken","jwtHelper","decodeToken","ngAfterViewInit","setTimeout","card","getElementById","removeClass","conectar","login","getRawValue","Login","t","_a","subscribe","next","res","i","operationResponse","operationStatus","setItem","stringify","sucess","message","icon","navigate","error","err","n","length","errorMessage","d","_b","OperationResponse","StatusMessage","delay","getErros","control","msg","isNullOrUndefined","errors","keys","map","x","params","getError","requiredLength","actualLength","min","max","touched","getErrors","LockComponent","DOCUMENT","ctx","LockRoutingModule","RouterModule","LockModule","CommonModule","ReactiveFormsModule","MaterialModule"],"sourceRoot":"webpack:///","sources":["./src/app/models/login.ts","./src/app/shared/components/app-loader/app-loader.component.ts","./src/app/shared/components/app-loader/app-loader.component.html","./src/app/shared/components/app-loader/app-loader.service.ts","./src/app/pages/lock/lock-routing.module.ts","./src/app/pages/lock/lock.component.ts","./src/app/shared/functions/get-errors.ts","./src/app/pages/lock/lock.component.html","./src/app/pages/lock/lock.module.ts"],"sourcesContent":["export class Login {\r\n    email: string;\r\n    password: string;\r\n\r\n    constructor(email: string, password: string) {\r\n        this.email = email;\r\n        this.password = password;\r\n    }\r\n}","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-app-loader',\n  templateUrl: './app-loader.component.html',\n  styleUrls: ['./app-loader.component.css']\n})\nexport class AppLoaderComponent implements OnInit {\n  title: any;\n  message: any;\n  constructor() {}\n\n  ngOnInit() {\n  }\n\n}\n","<div class=\"text-center\">\n    <h6 class=\"m-0 pb-1\"></h6>\n    <div mat-dialog-content>\n        <div id=\"preloader\">\n            <div id=\"loader\"></div>\n        </div>\n    </div>\n</div>","import { Injectable } from '@angular/core';\nimport { MatDialog, MatDialogRef } from '@angular/material/dialog';\nimport { AppLoaderComponent } from './app-loader.component';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AppLoaderService {\n\n  dialogRef!: MatDialogRef<AppLoaderComponent>;\n\n  constructor(private dialog: MatDialog) { }\n\n  public open(id: string = 'loaderID', title: string = 'Aguarde') {\n    Promise.resolve().then(() => {\n      const loader = this.dialog.getDialogById(id);\n      if (!loader) {\n        this.dialogRef = this.dialog.open(AppLoaderComponent, { id: id, disableClose: true, panelClass: 'dialog-container', });\n        this.dialogRef.updateSize('200px', '200px');\n        this.dialogRef.componentInstance.title = title;\n      }\n    });\n\n  }\n\n  public close(id: string = 'loaderID') {\n    if (this.dialogRef && id === 'loaderID') {\n      this.dialogRef.close();\n    } else {\n      const loader = this.dialog.getDialogById(id);\n      if (loader) {\n        loader.close();\n      }\n    }\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { LockComponent } from './lock.component';\n\nconst routes: Routes = [\n  { path: '', pathMatch: 'full', component: LockComponent }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class LockRoutingModule { }\n","import { DOCUMENT } from '@angular/common';\nimport { AfterViewInit, Component, Inject, OnInit, Renderer2 } from '@angular/core';\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { JwtHelperService } from '@auth0/angular-jwt';\nimport { AuthToken } from 'src/app/models/authToken';\nimport { Login } from 'src/app/models/login';\nimport { AuthService } from 'src/app/services/auth.service';\nimport { AppLoaderService } from 'src/app/shared/components/app-loader/app-loader.service';\nimport { NotifyService } from 'src/app/shared/components/notity/notify.service';\nimport { getErrors } from 'src/app/shared/functions/get-errors';\n\n@Component({\n  selector: 'app-lock',\n  templateUrl: './lock.component.html',\n  styleUrls: ['./lock.component.scss']\n})\nexport class LockComponent implements OnInit, AfterViewInit {\n\n  public frmLock: FormGroup;\n  public dadosToken!: any;\n  private jwtHelper: JwtHelperService = new JwtHelperService();\n\n\n  constructor(\n    @Inject(DOCUMENT) private document: Document,\n    private renderer: Renderer2,\n    private fb: FormBuilder,\n    private router: Router,\n    private loader: AppLoaderService,\n    private notify: NotifyService,\n    private authService: AuthService\n  ) {\n\n    this.frmLock = this.fb.group(\n      {\n        pass: ['', [Validators.required, Validators.minLength(3), Validators.maxLength(20)]]\n      });\n  }\n\n  ngOnInit(): void {\n    var currentUser = localStorage.getItem('currentUser');\n    if (currentUser) {\n      var token = JSON.parse(currentUser);\n      this.dadosToken = this.jwtHelper.decodeToken(token.token);\n\n    }\n  }\n\n  ngAfterViewInit(): void {\n    setTimeout(() => {\n      var card = this.document.getElementById(\"cardLock\");\n      this.renderer.removeClass(card, 'card-hidden')\n    }, 500);\n  }\n\n  public conectar() {\n    this.loader.open();\n    var login = this.frmLock.getRawValue();\n    this.authService.login(new Login(this.dadosToken?.email, login.pass)).subscribe({\n      next: (res: AuthToken) => {\n        if (res.operationResponse?.operationStatus) {\n          delete res.operationResponse\n          localStorage.setItem('currentUser', JSON.stringify(res));\n          this.notify.sucess({ message: 'Usuario Desbloqueado com Sucesso', title: 'Sucesso', icon: 'check_circle' });\n          this.router.navigate(['/']);\n        } else {\n\n        }\n        this.loader.close();\n      },\n      error: (err) => {\n        if (err?.error?.length > 0) {\n          this.notify.error({ message: err.error[0].errorMessage ? err.error[0].errorMessage : err.error, title: 'Erro', icon: 'error_outline' });\n        } else if (err?.error?.OperationResponse) {\n          this.notify.error({ message: err.error.OperationResponse.StatusMessage, title: 'Erro', icon: 'error_outline' });\n        } else {\n          this.notify.error({ message: 'Ocorreu um erro ao Logar no sistema, tente novamente!', title: 'Erro', icon: 'error_outline' }, { delay: 1000000 });\n        }\n\n        this.loader.close();\n      }\n\n    })\n  }\n\n  /**Função generica de mensagem de erro  */\n  public getErros(control: any, msg?: string | undefined) { return getErrors(control, msg); }\n\n}\n","import { AbstractControl } from '@angular/forms';\nimport { isNullOrUndefined } from './util';\n\n/**\n * Gerenciamento de mensagens de erro\n * @param control componetes que será validado\n * @param campo nome do campo de tela\n * @param msg mensagem alternativa\n */\nexport function getErrors(control: AbstractControl, msg?: string | undefined): string {\n\n    if (isNullOrUndefined(control) || !control.errors) {\n        return '';\n    }\n\n    const errors = Object.keys(control.errors).map((x: any) => {\n        var params = control.getError(x);\n        switch (x) {\n            case 'required': return 'Campo é obrigatório.';\n            case 'minlength': return `Tamanho mínimo é de ${params.requiredLength}, Você digitou ${params.actualLength}.`;\n            case 'maxlength': return `Campo deve conter no máximo ${params.requiredLength}, Você digitou ${params.actualLength}.`;\n            case 'min': return `O valor mínimo é de ${params.min}`;\n            case 'max': return `O valor máximo é de ${params.max}`;\n            case 'isEmailValidator': return `O valor não é um e-mail`;\n            default: return '';\n        }\n    });\n\n  //  const message = errors[errors.length - 1];\n    const message = errors[0];\n    return control.touched ? msg ?? message : '';\n\n}\n","<div class=\"page-header lock-page header-filter\"\n    style=\"background-image: url('../../assets/img/fundo-1.jpg'); background-size: cover; background-position: top center;\">\n    <div class=\"container\">\n        <div class=\"row\">\n            <div class=\"col-md-4 ml-auto mr-auto\">\n                <form class=\"form\" [formGroup]=\"frmLock\">\n\n                    <div id=\"cardLock\" class=\"card card-profile text-center card-hidden\">\n                        <div class=\"card-header \">\n                            <div class=\"card-avatar\">\n                                <!-- <a href=\"#\" aria-label=\"\" aria-hidden=\"true\"> -->\n                                    <img class=\"img\" src=\"../../assets/img/default-avatar.png\" alt=\"\" aria-label=\"\">\n                                <!-- </a> -->\n                            </div>\n                        </div>\n                        <div class=\"card-body \">\n                            <h4 class=\"card-title\">{{dadosToken?.sub}}</h4>\n                            <mat-form-field class=\"full-width\">\n                                <input matInput type=\"password\" placeholder=\"Senha\" formControlName=\"pass\" autofocus>\n                                <mat-error>{{ getErros(frmLock.get('pass')) }}</mat-error>\n                            </mat-form-field>\n                        </div>\n                        <div class=\"card-footer justify-content-center\">\n                            <button mat-raised-button type=\"submit\" class=\"btn btn-rose pull-right\"\n                                [disabled]=\"this.frmLock.invalid\" (click)=\"conectar()\">Desbloquear</button>\n                        </div>\n                    </div>\n\n                </form>\n            </div>\n        </div>\n    </div>\n</div>\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { LockRoutingModule } from './lock-routing.module';\nimport { LockComponent } from './lock.component';\nimport { MaterialModule } from 'src/app/material.module';\nimport { ReactiveFormsModule } from '@angular/forms';\n\n\n@NgModule({\n  declarations: [\n    LockComponent\n  ],\n  imports: [\n    CommonModule,\n    LockRoutingModule,\n    ReactiveFormsModule,\n    MaterialModule\n  ]\n})\nexport class LockModule { }\n"]}